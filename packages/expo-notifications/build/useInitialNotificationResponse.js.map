{"version":3,"file":"useInitialNotificationResponse.js","sourceRoot":"","sources":["../src/useInitialNotificationResponse.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAC5C,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAGxC,OAAO,EAAE,uCAAuC,EAAE,MAAM,wBAAwB,CAAC;AAEjF,0CAA0C;AAC1C,sBAAsB;AACtB,IAAI,iCAAiC,GAAqC,SAAS,CAAC;AAEpF,oDAAoD;AACpD,qDAAqD;AACrD,2DAA2D;AAC3D,IAAI,kBAAkB,GAAwB,uCAAuC,CAAC,QAAQ,CAAC,EAAE;IAC/F,2EAA2E;IAC3E,2BAA2B;IAC3B,iCAAiC,GAAG,QAAQ,CAAC;IAC7C,iCAAiC,EAAE,CAAC;AACtC,CAAC,CAAC,CAAC;AAEH,SAAS,+BAA+B;IACtC,8CAA8C;IAC9C,UAAU,CAAC,GAAG,EAAE,CAAC,iCAAiC,EAAE,EAAE,CAAC,CAAC,CAAC;AAC3D,CAAC;AAED,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,EAAE,+BAA+B,CAAC,CAAC;AAErE,SAAS,iCAAiC;IACxC,IAAI,kBAAkB,EAAE;QACtB,QAAQ,CAAC,mBAAmB,CAAC,QAAQ,EAAE,+BAA+B,CAAC,CAAC;QACxE,kBAAkB,CAAC,MAAM,EAAE,CAAC;QAC5B,kBAAkB,GAAG,IAAI,CAAC;KAC3B;AACH,CAAC;AAED;;;;;;GAMG;AACH,MAAM,CAAC,OAAO,UAAU,8BAA8B;IACpD,MAAM,CAAC,2BAA2B,EAAE,8BAA8B,CAAC,GAAG,QAAQ,CAE5E,iCAAiC,CAAC,CAAC;IAErC,SAAS,CAAC,GAAG,EAAE;QACb,iDAAiD;QACjD,kDAAkD;QAClD,wBAAwB;QACxB,UAAU,CAAC,GAAG,EAAE;YACd,qDAAqD;YACrD,sEAAsE;YACtE,8BAA8B,CAC5B,eAAe,CAAC,EAAE,CAAC,eAAe,IAAI,iCAAiC,IAAI,IAAI,CAChF,CAAC;QACJ,CAAC,EAAE,CAAC,CAAC,CAAC;IACR,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,2BAA2B,CAAC;AACrC,CAAC","sourcesContent":["import { Subscription } from '@unimodules/core';\nimport { useEffect, useState } from 'react';\nimport { AppState } from 'react-native';\n\nimport { NotificationResponse } from './Notifications.types';\nimport { addNotificationResponseReceivedListener } from './NotificationsEmitter';\n\n// Initial notification response caught by\n// global subscription\nlet globalInitialNotificationResponse: NotificationResponse | undefined = undefined;\n\n// A subscription for initial notification response,\n// cleared immediately once we believe we have caught\n// the initial notification response or there will be none.\nlet globalSubscription: Subscription | null = addNotificationResponseReceivedListener(response => {\n  // If useInitialNotificationResponse isn't registered yet, we'll provide it\n  // with good initial value.\n  globalInitialNotificationResponse = response;\n  ensureGlobalSubscriptionIsCleared();\n});\n\nfunction dispatchGlobalSubscriptionClear() {\n  // process.nextTick/requestAnimationFrame-like\n  setTimeout(() => ensureGlobalSubscriptionIsCleared(), 0);\n}\n\nAppState.addEventListener('change', dispatchGlobalSubscriptionClear);\n\nfunction ensureGlobalSubscriptionIsCleared() {\n  if (globalSubscription) {\n    AppState.removeEventListener('change', dispatchGlobalSubscriptionClear);\n    globalSubscription.remove();\n    globalSubscription = null;\n  }\n}\n\n/**\n * Returns an initial notification response if the app\n * was opened as a result of tapping on a notification,\n * null if the app doesn't seem to be opened as a result\n * of tapping on a notification, undefined until we are sure\n * of which to return.\n */\nexport default function useInitialNotificationResponse() {\n  const [initialNotificationResponse, setInitialNotificationResponse] = useState<\n    NotificationResponse | null | undefined\n  >(globalInitialNotificationResponse);\n\n  useEffect(() => {\n    // process.nextTick & requestAnimationFrame-like,\n    // without this on iOS the subscription is cleared\n    // before it's triggered\n    setTimeout(() => {\n      // Ensure the value is not undefined (if by this time\n      // it's still undefined there was no \"initial notification response\").\n      setInitialNotificationResponse(\n        currentResponse => currentResponse ?? globalInitialNotificationResponse ?? null\n      );\n    }, 0);\n  }, []);\n\n  return initialNotificationResponse;\n}\n"]}